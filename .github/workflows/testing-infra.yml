name: Terraform Azure Resource Group

on:
  push:
    branches:
      - raju_rgcreation

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.0

      - name: Initialize Terraform
        run: |
          cd nonprod/testing-infra  # Change to the correct directory
          terraform init
          cd ../..  # Return to the original working directory
      - name: Terraform Plan
        run: |
          cd nonprod/testing-infra  # Change to the correct directory
          terraform plan -var="resource_group_name=my-resource-group" -var="resource_group_location=East US"
          cd ../..  # Return to the original working directory
      - name: Terraform Apply
        run: |
          cd nonprod/testing-infra  # Change to the correct directory
          terraform apply -auto-approve -var="resource_group_name=my-resource-group" -var="resource_group_location=East US"
          cd ../..  # Return to the original working directory
      - name: Capture Outputs
        id: outputs
        run: |
          cd nonprod/testing-infra  # Change to the correct directory
          echo "::set-output name=resource_group_id::$(terraform output -json resource_group_id)"
          cd ../..  # Return to the original working directory
      - name: Save Terraform State
        run: |
          mkdir -p ${{ github.workspace }}/tfstate
          cp nonprod/testing-infra/terraform.tfstate* ${{ github.workspace }}/tfstate/
        if: success()

  cleanup:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Delete Terraform files
        run: rm -rf ${{ github.workspace }}/tfstate
