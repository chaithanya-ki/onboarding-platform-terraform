# This is a basic workflow to help you get started with Actions

name: create-selective-resources

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
     inputs:
       environment:
        required: true
        type: choice
        description: Choose the environment to deploy the Terraform code
        options: 
        - nonprod
        - qa
        - prod
       resources:
         required: true
         description: |
           Enter the comma seperated values. Below are the available options.
           - vnet
           - key_vault
           - route_table
           - resource_group
           - storage_account
           - storage_container
           - log_analytics_workspace
           - key_vault_access_policy
           - key_vault_service_principal_access_policy
           Example: vnet,storage_account
           
permissions:
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1     

      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
      # Login to Azure
      - name: Login to Azure 
        run: az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}" >/dev/null

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        id: set-map-value
        run: |
          IFS=',' read -ra resources <<< "$TF_RESOURCES"
             for resource in "${resources[@]}"; do                 
               case "$resource" in
                 "vnet")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_virtual_network.$resource"
                   ;;
                 "key_vault")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault.$resource"
                   ;;
                 "route_table")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_route_table.$resource"
                   ;;
                 "resource_group")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_resource_group.$resource"
                   ;;
                 "storage_account")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_storage_account.$resource"
                   ;;
                 "storage_container")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_storage_container.$resource"
                   ;;
                 "log_analytics_workspace")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_log_analytics_workspace.$resource"
                   ;;
                 "key_vault_access_policy")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault_access_policy.$resource"
                   ;;
                 "key_vault_service_principal_access_policy")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault_access_policy.$resource"
                   ;;
                 "databricks_workspace")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_databricks_workspace.$resource"
                   ;;
                 *)
                   echo "Input value '$input_value' not recognized"
                   exit 1
                   ;;                   
               esac               
             done  
          echo "::set-output name=map-output::$mapped_value"
          
        env:
             TF_RESOURCES: ${{ github.event.inputs.resources }}
             
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init - Azure Infra
        run: |
          cd ${{ github.event.inputs.environment }}/azure-infra       
          terraform init 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             
      # Generates an execution plan for Terraform
      - name: Terraform Plan - Azure Infra
        run: |
          mapped_value="${{ steps.set-map-value.outputs.map-output }}"
          targets=`echo $mapped_value | sed 's/,/ -target=/g'`
          cd ${{ github.event.inputs.environment }}/azure-infra
          terraform plan $targets -var-file=terraform.tfvars
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          
          
      # Apply the Terraform Code
      - name: Terraform Apply - Azure Infra
        run: |
          mapped_value="${{ steps.set-map-value.outputs.map-output }}"
          targets=`echo $mapped_value | sed 's/,/ -target=/g'`
          cd ${{ github.event.inputs.environment }}/azure-infra
          terraform apply $targets -var-file=terraform.tfvars --auto-approve
        env: 
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}



           
          
         
